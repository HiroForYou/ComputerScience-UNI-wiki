// clase nodo doble
class NodoDoble{
	private:
		int dato;
		NodoDoble* adelante; // A la derecha
		NodoDoble* atras; // A la izquierda
	public:
		NodoDoble(int t){
			dato=t;
			adelante=atras=0;

		}

		int datoNodo(){
			return dato;
		}
		NodoDoble* adelanteNodo(){return adelante;}
		NodoDoble* atrasNodo(){return atras;}
		void ponerAdelante(NodoDoble* a){adelante=a;}
		void ponerAtras(NodoDoble* a){atras=a;}
};
#include <iostream>
using namespace std;

/*
int main(){
	NodoDoble *x, *y, *z;
	x = new NodoDoble(7);
	y = new NodoDoble(9);
	z = new NodoDoble(5);
	cout<<"Atras\tDirDato\t\tDato\tAdelante\n";
	cout<<x->atrasNodo()<<"\t"<<x<<"\t"<<x->datoNodo()<<"\t"<<x->adelanteNodo()<<endl;
	cout<<y->atrasNodo()<<"\t"<<y<<"\t"<<y->datoNodo()<<"\t"<<y->adelanteNodo()<<endl;
	cout<<z->atrasNodo()<<"\t"<<z<<"\t"<<z->datoNodo()<<"\t"<<z->adelanteNodo()<<endl;
	x->ponerAdelante(y); y->ponerAtras(x);
    y->ponerAdelante(z); z->ponerAtras(y);
	cout<<"Atras\t\tDirDato\tDato\tAdelante\n";
	cout<<x->atrasNodo()<<"\t"<<x<<"\t"<<x->datoNodo()<<"\t"<<x->adelanteNodo()<<endl;
	cout<<y->atrasNodo()<<"\t"<<y<<"\t"<<y->datoNodo()<<"\t"<<y->adelanteNodo()<<endl;
	cout<<z->atrasNodo()<<"\t"<<z<<"\t"<<z->datoNodo()<<"\t"<<z->adelanteNodo()<<endl;

    return 0;

}
*/

// Clase List Doble
class ListaDoble{
	private:
		NodoDoble* cabeza;
	public:
		ListaDoble(){
			cabeza = 0;
		}
		void crearLista();
		void visualizar();
		void insertarCabezaLista(int);
		void insertarFinLista(int);
		void insertarDespues(int, int);
		void insertarAntes(int, int);
		void eliminar(int);
		void modificar(int, int);
};

// crear la lista doblemente enlazada
void ListaDoble::crearLista(){
	int x;
	//cabeza=0; //0 es NULL en devc++
	cout<<"Termina con -1"<<endl;
	do{
		cin>>x;
		if(x!=-1){
			insertarCabezaLista(x);
		}
	}while(x!=-1);
}

void ListaDoble::insertarCabezaLista(int dato){
	NodoDoble* nuevo;
	nuevo = new NodoDoble(dato);

	nuevo->ponerAdelante(cabeza);

	if(cabeza!=NULL){
		cabeza->ponerAtras(nuevo);

	}

	cabeza=nuevo;
}

// Visualizar lista doble
void ListaDoble::visualizar(){
	NodoDoble* indice;
	indice = cabeza;
	cout<<"Atras\tDirDato\t\tDato\tAdelante\n";
	while (indice!=NULL){

		cout<<indice->atrasNodo()<<"\t\t"<<indice<<"\t"<<indice->datoNodo()<<"\t"<<indice->adelanteNodo()<<endl;
        indice=indice->adelanteNodo();
	}
}

// insertando despues de un nodo
void ListaDoble::insertarDespues(int datoAnterior, int dato){
	NodoDoble* nuevo;
	NodoDoble* anterior;
	nuevo = new NodoDoble(dato);

	// Bucle de busqueda anterior
	NodoDoble* indice;
	bool encontrado = false;
	indice = cabeza;
	while((indice !=NULL)&&(!encontrado)){
		encontrado = (indice->datoNodo() == datoAnterior);
		if(!encontrado){
			indice = indice->adelanteNodo();
		}
	}
	// insertar despues
	if(indice !=NULL){
		anterior=indice;
		nuevo->ponerAdelante(anterior->adelanteNodo());
		if(anterior->adelanteNodo() != NULL){
			anterior->adelanteNodo()->ponerAtras(nuevo);
		}
		anterior->ponerAdelante(nuevo);
		nuevo->ponerAtras(anterior);
	}
}

 void ListaDoble::eliminar(int dato){

	NodoDoble* indice;
	bool encontrado = false;
	indice = cabeza;

	// bucle de busquedas
	while((indice !=NULL)&&(!encontrado)){
		encontrado = (indice->datoNodo() == dato);
		if(!encontrado){
			indice = indice->adelanteNodo();
		}
	}
	// enlace de nodo anterior con el siguiente
	if(indice !=NULL){

		// distingue entre nodo cabecera o resto de la lista
		if(indice==cabeza){
			cabeza = indice->adelanteNodo();
            if(indice->adelanteNodo() != NULL)

		}
		anterior=indice;
		nuevo->ponerAdelante(anterior->adelanteNodo());
		if(anterior->adelanteNodo() != NULL){
			anterior->adelanteNodo()->ponerAtras(nuevo);
		}
		anterior->ponerAdelante(nuevo);
		nuevo->ponerAtras(anterior);
	}
 }

int main(){
	ListaDoble miLista;
	miLista.crearLista();
	miLista.insertarCabezaLista(5000);
	miLista.insertarDespues(5, 1000);
	miLista.insertarDespues(45, 8000);
	miLista.visualizar();
	return 0;
}
