# include <iostream>
#include <vcl.h>
#include <stdio.h>
typedef char TipoDato;
const int TAMPILA=6;
using namespace std;
class Pila{
	private:
		int cima; //El índice del último elemento ingresado
		TipoDato listaPila[TAMPILA];
	public:
		Pila(){
			cima=-1; //condicion de pila vacía
		}
		void insertar(TipoDato);  //push
		TipoDato quitar(); // pop
		bool pilaVacia(); // verdadero si la pila esta vacia
		bool pilaLlena();
		void limpiarPila();
		TipoDato cimaPila(); //elemento que esta en la cima
		int mostrarCima(); //devuelve la cima
		int tamanoPila();


};

void completarPila(Pila &pila){
		TipoDato x;
		int n;
		cout<<"Cuantos elementos ingresará a la pila (max. 6):";
		cin>>n;
		cout<<"Digite el elemento y presione ENTER\n";
		for (int i=0; i < n; i++) {
			cout<<"cima pila: "<<pila.mostrarCima()<<" : "<<"Elemento cima "<<pila.cimaPila()<<endl;
			cout<<"indice "<<i<<": ";
			cin>>x;
			pila.insertar(x);
			//cout<<"cima pila: "<<pila.mostrarCima()<<" : "<<"Elemento cim "<<pila.cimaPila()<<endl;
		}

}

void mostrarPila(Pila &pila){

	TipoDato x;
	cout<<"\nElementos retirados de la pila:\n";
	while(!pila.pilaVacia()){
		cout<<"cima pila: "<<pila.mostrarCima()<<" : "<<"Elemento cima "<<pila.cimaPila()<<endl;
		x=pila.quitar();
		cout<<x<<"  ";
		//cout<<"cima pila: "<<pila.mostrarCima()<<" : "<<"Elemento cim "<<pila.cimaPila()<<endl;

	}
	cout<<"cima pila: "<<pila.mostrarCima()<<" : "<<"Elemento cima "<<pila.cimaPila()<<endl;


}

void Pila::insertar(TipoDato elemento){
	if (pilaLlena()) {
		cout<<"Desbordamiento (overflow :v).\n";
	}else{
		// incrementar puntero cima y copia elemento
		cima++;
		listaPila[cima]=elemento;
	}

}

bool Pila::pilaLlena(){
	return cima==TAMPILA;
}

bool Pila::pilaVacia(){
	return cima==-1;
}

int Pila::mostrarCima(){
	return cima;
}

TipoDato Pila::cimaPila(){
	if(pilaVacia()){
		cout<<"Pila vacia!!!\n";
		return 0;
	}else{
		return listaPila[cima];
	}

}

TipoDato Pila::quitar(){
	TipoDato x;
	if(pilaVacia()){
		cout<<"Desbordamiento negativo\n";
		return 0;

	}else{
		x=listaPila[cima];
		cima--;
		return x;
    }
}

int Pila::tamanoPila(){
	return TAMPILA;
}

void Pila::limpiarPila(){
	cima=-1;
}

int main(){
	bool palindromo=true;

	Pila pila; // creamos una pila vacia
	int x=pila.tamanoPila();

	completarPila(pila);
	mostrarPila(pila);
	//pila.insertar(777);
	//pila.insertar(888);
	char palabra[6] = {'r', 'a', 'l', 'l', 'a', 'r'};
	for (int i = 0; i < x; i++) {
		if(palabra[i]!=pila.cimaPila()){
		  palindromo=false;
		}
		pila.quitar();
	}

	if(palindromo){
		cout<<"Son palindromos\n";
	}else{
		cout<<"No son palindromos\n";
    }



	Sleep(5000);
	return 0;
}

